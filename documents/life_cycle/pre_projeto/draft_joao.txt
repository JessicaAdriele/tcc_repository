<Introdução>

	O desenvolvimento de um software não envolve apenas métodos de programação. Para desenvolvê-lo é necessário preocupar-se com planejamento, engenharia, metodologia e tecnologia a ser utilizada. Esses fatores influenciam na manutenção, atualização e expansão do mesmo. Dessa forma, definir tais fatores é fundamental para que o software seja flexível a mudanças. Pensando dessa maneira, iremos demonstrar um modelo de desenvolvimento modular, utilizando a especificação OSGi.
	
	OSGi, abreviação para Open Services Gateway Initiative, possibilita o desenvolvimento de software em módulos, disponibilizando o gerenciamento dos mesmos e facilidades na manutenção e expansão da aplicação.
	
	Segundo Fernandes (2009), um sistema modular possui algumas propriedades. Deve ser autocontido, os módulos podem ser incluídos, retirados, instalados ou desinstalados. Outra propriedade é ter alta coesão, um módulo deve cumprir apenas sua finalidade, ou seja, deve fazer somente as funções que lhe foram atribuídas. O baixo acoplamento é outra propriedade muito importante, um módulo não precisa se preocupar com implementações de outros módulos que interagem com ele, além de permitir alterá-lo sem a necessidade de atualizar os outros.
	
	Muitos softwares são desenvolvidos de maneira semelhante a modularização, divididos em partes, tendo cada parte uma responsabilidade. Porém não são realmente modularizados, ou seja, não atendem ao conceito de modularização como descrito acima. Podemos citar dois exemplos de projetos de softwares que foram desenvolvidos utilizando a especificação OSGi e atendendo a definição de modularização, que são, IDE Eclipse, ferramenta de desenvolvimento de softwares e o GlassFish, servidor de aplicações JEE.
	
	O uso da modularização, com certeza, traz grandes benefícios para o desenvolvimento e manutenção de um software. Poder parar parte de uma aplicação para fazer uma manutenção ou poder instalar novas funcionalidades, garantindo que todas as outras partes restantes continuem funcionando normalmente, seria uma característica notável da aplicação.
	
	Fernandes (2009) forneceu uma visão geral sobre o framework, mostrando seus benefícios e salientando a importância da plataforma Java possuir um melhor suporte à modularidade, até demonstrando com um exemplo simples as premissas e vantagens do OSGi.
	
	Mayworm (2010) demonstra a tecnologia OSGi no contexto de aplicações distribuídas, permitindo a disponibilização de seus serviços remotamente, integrando com diferentes frameworks de middleware para o desenvolvimento de aplicações empresariais.
	
	Malcher (descobrir ano) apresenta um modelo de componentes adaptável para se usar em ambientes distribuídos. Também analisa alguns aspectos como modelo de distribuição, transparência, descoberta de novos módulos disponíveis, desempenho e performance dos mesmos. Afirma ainda que para se escolher entre um modelo de distribuição - deployment local ou execução remota – é necessário analisar o contexto e o objetivo da aplicação, pois cada um se adequa mais a determinadas situações e ambientes de execução.
	
	Portanto, com a especificação OSGi sendo um padrão de desenvolvimento de aplicativos modulares em Java, que oferece benefícios no desenvolvimento, manutenção e atualização do software, nos despertou um grande interesse em aprofundarmos nossos estudos nessa especificação, decidindo desenvolver uma aplicação que exemplifique seu funcionamento em módulos.
	
	<referencias>
		KNOERNSCHILD, Kirk. Java application architecture: modularity patterns with examples using OSGi. Crawfordsville: Pearson Education, 2012.
		MAYWORM, Marcelo. OSGi Distribuída: Uma Visão Geral. 42.ed. 2010. p. 60-67.
		FERNANDES, Leonardo. OSGi e os benefícios de uma Arquitetura Modular. 37.ed. 2009. p. 27-35.
		VILLELA-PETIT, M. da Penha. Le narratif biblique et la philosophie de l’histoire. In: PALÁCIO, Carlos (Org.). Cristianismo e história. São Paulo: Loyola, 1982. p. 115-131.
	</referencias>
	
	<removido>
		Segundo Knoernschild (2012), um módulo de software deve ser instalável, gerenciável (parar, reiniciar e ser desinstalado sem interromper o restante da aplicação), reutilizável (utilizar em outros sistemas), combinável (combinar com outros módulos), não guardar estado e oferecer uma interface clara.
	</removido>
	
</Introdução>


<Objetivos>

	<Objetivo_geral>
		Demonstrar o modelo de desenvolvimento modular utilizando a especificação OSGi para aplicações empresariais.
	</Objetivo_geral>


	<Objetivos_específicos>

		Para atingir o objetivo geral apresentamos os seguintes objetivos específicos:
		
		Pesquisar as melhores práticas e frameworks que contribuem para a produtividade no desenvolvimento modularizado;
		Desenvolver uma aplicação que exemplifique a modularização de software;
		Obter através dos resultados uma conclusão sobre a viabilidade de desenvolvimento modularizado para empresas.
		
	</Objetivos_específicos>

</Objetivos>